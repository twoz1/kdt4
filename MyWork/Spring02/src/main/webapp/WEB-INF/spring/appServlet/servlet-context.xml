<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
   <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

<!-- ** 비교 
   * mvc:annotation-driven
   Spring MVC 컴포넌트들을 디폴트 설정을 통해 활성화한다.
   Spring MVC @Controller에 요청을 보내기 위해 필요한 
   HandlerMapping과 HandlerAdapter를 Bean으로 등록한다.
   - HandlerMapping : HTTP 요청명과 해당 컨트롤러 (매핑메서드) 를 찾아주는 기능
   - HandlerAdapter : HandlerMapping을 통해 찾은 컨트롤러를 직접 실행하는 기능을 수행
   아래의 context:component-scan과 결합해서 해당 패키지내의 @Controller 로 작성한 컨트롤러를 자동으로 인식시켜줌.

   * context:component-scan
   특정 패키지 내의 클래스를 스캔하고 
   Annotation(@Component @Controller @Service @Repository)을 확인한 후 Bean 인스턴스로 생성한다.
   이를 이용하면 @Autowired와 @Qualifier Annotation을 인식할 수 있다.
   context:component-scan을 선언했다면 context:annotation-config를 선언할 필요가 없다.

   * context:annotation-config
   ApplicationContext 안에 이미 등록된 Bean들의 Annotation을 활성화하기 위해 사용된다.
   Component-scan과의 차이점은 이 설정은 Bean을 등록하는 작업을 수행하지 않는다는 것이다.
-->

   <context:component-scan base-package="com.ncs.green, service, model" />
   
   <!-- Enables the Spring MVC @Controller programming model -->
   <annotation-driven />

   <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
   <resources mapping="/resources/**" location="/resources/" />
   <!-- 
   <resources> : location에 대한 요청이 Spring MVC에 영향을 받아 직접 접근이 불가능한 경우
                 이를 WAS에게 위임하여 url로 resourse에 직접 접근 할 수 있도록 해줌.    
            * : 0 개 이상의 문자와 매칭 
            ** : 0 개 이상의 디렉토리와 화일과 매칭 
            mapping="/resources/**" : /resources/ 의 하위 경로로 접근하는 모든 경로와 파일은
            location="/resources/" : /resources/ 디렉토리 에서 찾아라 ~~~ 
   -->

   <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
   <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <beans:property name="prefix" value="/WEB-INF/views/" />
      <beans:property name="suffix" value=".jsp" />
   </beans:bean>
   
   <!--    ** File_Download **
      => 이전과는 다르게 Data 만을 Response에 담아줘야함  
      => 이것을 위한 ViewResolver 가 필요하고, : 직접작성 ( DownloadView.java )
      => 필요에 따라 해당하는 ViewResolver 를 선택할수 있어야함 : BeanNameViewResolver
      1) BeanNameViewResolver 설정
      2) DownloadView.java 설정    -->
      
   <beans:bean id="viewResolver" 
            class="org.springframework.web.servlet.view.BeanNameViewResolver">
      <beans:property name="order" value="1" />
   </beans:bean>
      
   <!--   ** BeanNameViewResolver
         => id 에 해당하는 Bean이 View(Response) 를 처리하도록 해주는 ViewResolver 
         컨트롤러에서 return "jsonView" 하게되면  
         일반적인 경우 InternalResourceViewResolver 에 의해  views/jsonView.jsp 를 찾음,
         그러나  jsp 가 아닌 형태의  response 를 처리하는 경우에는 한 이 경우에는 "jsonView" 와
         동일한  id 로 생성된 Bean 을 찾아 response 를 처리함
      => 그래서   ViewResolver 들 간의 우선순위가 필요함 ( 아래  property order 참고 ) 
      => 사용예 : "jsonView" , ImageDownLoad 의 "downloadView" 

      ** property order 
       => 두개이상 존재하는 viewResolver 를 위해서 우선순위를 매기는 것.
           우선순위를 명시 하지 않으면 "가장 낮은 우선순위를 갖게 된다."
           우선순위는 "0"이 가장 먼저 실행되고, 이후로 매겨지는 순서에 따라 실행된다.
       => 그  다음 viewResolver가 실행 기준은 "null" 이 반환되느냐 가 기준이다. 
           그래서 null 값이 있을수 없는 InternalResourceViewResolver 가 우선순위가 높게 되면,
           다른 viewResolver는 사용되지 않기 때문에 (항상 뷰 이름에 매핑되는 뷰 객체를 리턴하기 때문)
        InternalResourceViewResolver 는 우선순위가 가장 낮아야 한다. 
   -->    
   <!--  ** Image(File) DownLoad 
         => 다운로드를 처리할 ViewResolver 클래스 등록  ( Java_Code 작성 )
          => id="downloadView" 와  컨트롤러의 매핑메서드에서 리턴된 view name 과 같아야 한다. -->      
   <beans:bean id="downloadView" class="downloadTest.DownloadView" />
   
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      *** Image(File)_Upload  설정-->
    <beans:bean id="multipartResolver" 
                class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
       <beans:property name="maxUploadSize" value="-1" />
      </beans:bean>
      <!--
           => id , name 변경 불가능 
              : 대부분의 Resolver로 끝나는 클래스의 경우에는 이미 정해져있기 때문에 변경불가능.
           => maxUploadSize 는 지정하지 않으면 default 값은 -1 이며 크기 무제한이 됨. 
              다양하게 변경하며 Test  
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->
   
</beans:beans>